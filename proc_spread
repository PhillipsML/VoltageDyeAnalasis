function [spread,perc_spread] = proc_spread(opticaldata)



%use if you want the noise to be calculated for each individual video
%Takes the 'noise' for each pixel (pre-stim) and removes anything below
%stdev thats. Makes a binary
% for i = 1:64 
%     for j = 1:64
%         nums = opticaldata(i,j,:); nums = nums(:,:)';
%         
%         noise = 3*std(opticaldata(i,j,1:140));
%         n3(i,j) = noise;
%         bin_od(i,j,:) = opticaldata(i,j,:)<-abs(noise);
%     end
% end

%change these values for your own use: this is a hard set  noise level
bin_od = -0.0015>opticaldata>0.0015;
%converts the binarized no noise into a double with the true values
rn = bin_od.*opticaldata;
for i = 1:350
    %finds the boundaries of the excitation  - from the binary we created
    %before
    b = bwboundaries(bin_od(:,:,i),'noholes');
    %finds the length of all the boundaries and finds the maximum
    z = cellfun('length', b);
    if length(z)>0
    for s = 1:length(z)
        x = b(s);x=x{:};
        sz(s,1) = polyarea(x(:,1),x(:,2));
    end
    ind = find(sz==max(sz));
    else
        ind=NaN;
    end
    try
        %makes it useable
    sp = b(ind);sp = sp{:};
    %find the area within those boundaries, then multiplies (12.574 * pixel
    %number = um^2)
    spread(i,1) = 12.574* polyarea(sp(:,1), sp(:,2));
    catch
        %if the spread is empty it will give 0
        spread(i,1) = 0;
    end
end

numavailable = sum(sum(sum(opticaldata,3)~=0));
numavailable = numavailable*12.574;
perc_spread = spread/numavailable;

end

